@page "/notes"
<link rel="stylesheet" href="css/notes.css">
<link rel="stylesheet" href="css/loading/load.css"> <!-- Asegura que el CSS de la animación esté vinculado -->
@using Notepad.Services
@using Notepad.Models

@inject NotesService NotesService
@inject NavigationManager Navigation

@if (isLoading)
{
    <div class="cssload-container">
        <ul class="cssload-flex-container">
            <li>
                <span class="cssload-loading cssload-one"></span>
                <span class="cssload-loading cssload-two"></span>
                <span class="cssload-loading-center"></span>
            </li>
        </ul>
    </div>
}
else
{
    <div class="notes-container">
        <h3 class="title">Lista de Notas</h3>

        <button class="add-note-btn" @onclick="IrAgregarNota">➕ Agregar Nota</button>

        @if (notas == null)
        {
            <p class="loading-text">Cargando...</p>
        }
        else if (!notas.Any())
        {
            <p class="empty-text">📌 No hay notas disponibles.</p>
        }
        else
        {
            <ul class="notes-list">
                @foreach (var note in notas)
                {
                    <li class="note-item">
                        <div class="note-content">
                            <strong>@note.Title</strong> - @note.Content
                        </div>
                        <div class="note-actions">
                            <button class="action-btn details" @onclick="() => VerDetalles(note.Id)">👀 Detalles</button>
                            <button class="action-btn edit" @onclick="() => EditarNota(note.Id)">✏️ Editar</button>
                            <button class="action-btn delete" @onclick="() => EliminarNota(note.Id)">🗑 Eliminar</button>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    private List<Notes> notas;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000); // Simula un tiempo de carga de 2 segundos
        notas = await NotesService.GetAllNotesAsync();
        isLoading = false;
    }

    private void IrAgregarNota()
    {
        Navigation.NavigateTo("/add-note");
    }

    private void EditarNota(int id)
    {
        Navigation.NavigateTo($"/edit-note/{id}");
    }

    private void VerDetalles(int id)
    {
        Navigation.NavigateTo($"/note-details/{id}");
    }

    private async Task EliminarNota(int id)
    {
        await NotesService.DeleteNoteAsync(id);
        notas = await NotesService.GetAllNotesAsync();
    }
}
